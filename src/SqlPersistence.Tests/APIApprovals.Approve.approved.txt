namespace NServiceBus.Persistence.Sql
{
    public interface ISqlStorageSession
    {
        System.Data.Common.DbConnection Connection { get; }
        System.Data.Common.DbTransaction Transaction { get; }
    }
    public class MessagePropertyMapper<TSagaData>
        where TSagaData : NServiceBus.IContainSagaData, new ()
    {
        public void MapMessage<TMessage>(System.Linq.Expressions.Expression<System.Func<TMessage, object>> messageProperty) { }
    }
    [System.ObsoleteAttribute("Not for public use")]
    public class static OutboxCommandBuilder
    {
        public static NServiceBus.Persistence.Sql.OutboxCommands Build(NServiceBus.Persistence.Sql.SqlVariant sqlVariant, string tablePrefix) { }
    }
    [System.ObsoleteAttribute("Not for public use")]
    public class OutboxCommands
    {
        public OutboxCommands(string store, string get, string setAsDispatched, string cleanup) { }
        public string Cleanup { get; set; }
        public string Get { get; set; }
        public string SetAsDispatched { get; set; }
        public string Store { get; set; }
    }
    public delegate Newtonsoft.Json.JsonSerializerSettings RetrieveVersionSpecificJsonSettings(System.Type sagaDataType, System.Version sagaVersion);
    [System.ObsoleteAttribute("Not for public use")]
    public class SagaCommandBuilder
    {
        public SagaCommandBuilder() { }
        public string BuildCompleteCommand(string tableName) { }
        public string BuildGetByPropertyCommand(string propertyName, string tableName) { }
        public string BuildGetBySagaIdCommand(string tableName) { }
        public string BuildSaveCommand(string correlationProperty, string transitionalCorrelationProperty, string tableName) { }
        public string BuildSelectFromCommand(string tableName) { }
        public string BuildUpdateCommand(string transitionalCorrelationProperty, string tableName) { }
    }
    public class SagaSettings
    {
        public void JsonSettings(Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings) { }
        public void JsonSettingsForVersion(NServiceBus.Persistence.Sql.RetrieveVersionSpecificJsonSettings builder) { }
        public void ReaderCreator(System.Func<System.IO.TextReader, Newtonsoft.Json.JsonReader> readerCreator) { }
        public void WriterCreator(System.Func<System.Text.StringBuilder, Newtonsoft.Json.JsonWriter> writerCreator) { }
    }
    public class SqlPersistence : NServiceBus.Persistence.PersistenceDefinition
    {
        public SqlPersistence() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.All)]
    public class SqlPersistenceSettingsAttribute : System.Attribute
    {
        public SqlPersistenceSettingsAttribute(bool msSqlServerScripts = False, bool mySqlScripts = False, string scriptPromotionPath = null) { }
        public bool MsSqlServerScripts { get; }
        public bool MySqlScripts { get; }
        public string ScriptPromotionPath { get; }
    }
    public abstract class SqlSaga<TSagaData> : NServiceBus.Saga<TSagaData>
        where TSagaData : NServiceBus.IContainSagaData, new ()
    {
        protected SqlSaga() { }
        protected override void ConfigureHowToFindSaga(NServiceBus.SagaPropertyMapper<TSagaData> mapper) { }
        protected virtual void ConfigureMapping(NServiceBus.Persistence.Sql.MessagePropertyMapper<TSagaData> mapper) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, Inherited=false)]
    public class SqlSagaAttribute : System.Attribute
    {
        public SqlSagaAttribute(string correlationProperty = null, string transitionalCorrelationProperty = null, string tableSuffix = null) { }
        public string CorrelationProperty { get; }
        public string TableSuffix { get; }
        public string TransitionalCorrelationProperty { get; }
    }
    public enum SqlVariant
    {
        MsSqlServer = 0,
        MySql = 1,
    }
    [System.ObsoleteAttribute("Not for public use")]
    public class static SubscriptionCommandBuilder
    {
        public static NServiceBus.Persistence.Sql.SubscriptionCommands Build(NServiceBus.Persistence.Sql.SqlVariant sqlVariant, string tablePrefix) { }
    }
    [System.ObsoleteAttribute("Not for public use")]
    public class SubscriptionCommands
    {
        public SubscriptionCommands(string subscribe, string unsubscribe, System.Func<System.Collections.Generic.List<NServiceBus.Unicast.Subscriptions.MessageType>, string> getSubscribers) { }
        public System.Func<System.Collections.Generic.List<NServiceBus.Unicast.Subscriptions.MessageType>, string> GetSubscribers { get; }
        public string Subscribe { get; }
        public string Unsubscribe { get; }
    }
    [System.ObsoleteAttribute("Not for public use")]
    public class static TimeoutCommandBuilder
    {
        public static NServiceBus.Persistence.Sql.TimeoutCommands Build(NServiceBus.Persistence.Sql.SqlVariant sqlVariant, string tablePrefix) { }
    }
    [System.ObsoleteAttribute("Not for public use")]
    public class TimeoutCommands
    {
        public TimeoutCommands(string removeById, string next, string peek, string add, string removeBySagaId, string range) { }
        public string Add { get; }
        public string Next { get; }
        public string Peek { get; }
        public string Range { get; }
        public string RemoveById { get; }
        public string RemoveBySagaId { get; }
    }
}
namespace NServiceBus
{
    public class static SqlPersistenceConfig
    {
        public static void ConnectionBuilder(this NServiceBus.PersistenceExtensions<NServiceBus.Persistence.Sql.SqlPersistence> configuration, System.Func<System.Data.Common.DbConnection> connectionBuilder) { }
        public static void DisableInstaller(this NServiceBus.PersistenceExtensions<NServiceBus.Persistence.Sql.SqlPersistence> configuration) { }
        public static NServiceBus.Persistence.Sql.SagaSettings SagaSettings(this NServiceBus.PersistenceExtensions<NServiceBus.Persistence.Sql.SqlPersistence> configuration) { }
        public static void SqlVariant(this NServiceBus.PersistenceExtensions<NServiceBus.Persistence.Sql.SqlPersistence> configuration, NServiceBus.Persistence.Sql.SqlVariant sqlVariant) { }
        public static void TablePrefix(this NServiceBus.PersistenceExtensions<NServiceBus.Persistence.Sql.SqlPersistence> configuration, string tablePrefix) { }
    }
    public class static SqlPersistenceStorageSessionExtensions
    {
        public static System.Threading.Tasks.Task<TSagaData> GetSagaData<TSagaData>(this NServiceBus.Persistence.SynchronizedStorageSession session, NServiceBus.Extensibility.ReadOnlyContextBag readOnlyContextBag, string whereClause, ParameterAppender appendParameters)
            where TSagaData : NServiceBus.IContainSagaData { }
        public static NServiceBus.Persistence.Sql.ISqlStorageSession SqlPersistenceSession(this NServiceBus.Persistence.SynchronizedStorageSession session) { }
    }
}
public delegate void ParameterAppender(System.Func<System.Data.Common.DbParameter> parameterBuilder, System.Data.Common.DbParameterCollection parameterCollection);
public class static SagaPropertyFilter
{
    public static System.Collections.Generic.List<Newtonsoft.Json.Serialization.JsonProperty> FilterProperties(System.Collections.Generic.IList<Newtonsoft.Json.Serialization.JsonProperty> properties) { }
}